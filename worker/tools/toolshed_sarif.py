# Copyright (C) Microsoft Corporation, All rights reserved.

from sarif_om import *  # noqa # pylint: disable=unused-wildcard-import
from jschema_to_python.to_json import to_json

class ToolshedSarif:
    
    results = []
    runs = {}
    properties = {}

    def __init__(self, properties={}):
        self.properties = properties

    def check_required_fields(self, **kwargs):
        KEYS = ['tool_name', 'rule_id', 'rule_short_description', 'purl', 'filename', 'message', 'start_line', 'end_line', 'level']
        if not all([k in kwargs for k in KEYS]):
            raise KeyError("Missing a required key.")

    def add_result(self, **kwargs):
        self.check_required_fields(**kwargs)
        tool_name = kwargs.get('tool_name')

        rule_id = kwargs.get('rule_id')
        rule_name = kwargs.get('rule_name')
        rule_short_description = kwargs.get('rule_short_description')

        # Initialize a run (once per tool_name)
        if tool_name not in self.runs:
            run = Run(artifacts=[], tool=Tool(driver=ToolComponent(name=tool_name, rules=[])))
            automation_details = RunAutomationDetails()
            automation_details.description = Message(text="This file was generated by ToolShed.",
                                                     properties=self.properties)
            run.automation_details = automation_details
            run.version_control_provenance = [VersionControlDetails(repository_uri=kwargs.get('purl'))]

            self.runs[tool_name] = run

        # Add Rules as needed
        if not any([rule.id == rule_id for rule in self.runs[tool_name].tool.driver.rules]):
            self.runs[tool_name].tool.driver.rules.append(ReportingDescriptor(id=rule_id, name=rule_name, short_description=Message(text=rule_short_description)))

        # Add Artifacts as needed
        if not any([artifact.location.uri == kwargs.get('filename') for artifact in self.runs[tool_name].artifacts]):
            self.runs[tool_name].artifacts.append(Artifact(location=ArtifactLocation(uri=kwargs.get('filename'))))

        if not self.runs[tool_name].results:
            self.runs[tool_name].results = []

        result = Result(rule_id=rule_id, message=Message(text=kwargs.get('message')), level=kwargs.get('level'))
        if 'result_properties' in kwargs:
            result.properties = kwargs.get('result_properties')

        artifact_location = ArtifactLocation(uri=kwargs.get('filename'), uri_base_id='SRCROOT')
        region = Region(start_line=kwargs.get('start_line'))
        message = Message(text=kwargs.get('snippet')) if 'snippet' in kwargs else None

        context_region = Region(start_line=kwargs.get('start_line'), end_line=kwargs.get('end_line'), snippet=message)
        result.locations = [Location(physical_location=PhysicalLocation(artifact_location=artifact_location, region=region, context_region=context_region))]

        self.runs[tool_name].results.append(result)

    def to_json(self):
        sarif_log = SarifLog(runs=list(self.runs.values()), 
                             version="2.1.0",
                             schema_uri="https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0.json")
        return to_json(sarif_log)
